    
    exit()函数可以终止整个程序，其头文件为cstdlib。除了错误采用这种方式过于激进。对于错误的处理方式，第七章进行讨论。

    return:若函数的返回值不为void，那么它必须在每个可能的退出点上将值返回，函数中的每条return语句都被用来明确的表示该处就是函数的退出点。

    传递方式：by reference 和 by value

    C++不允许改变referen所代表的对象，其必须从一而终。

    当我们希望对传入的对象可以进行修改的时候，可以采用 by reference，by reference传递相当于是传递指针，4个字节，速度更快

    对于函数内定义的对象，其只会存在于函数执行期间。若果将这个所谓的局部对象（local object）的地址返回，会导致错误运行。若按值传递则不会出现问题，
因为返回的为对象的副本，他在函数之外仍然存在。

    new可以从heap中分配一个对象，然后将对象的地址给一个指针。int* p； p=new int(1024);表明p指向一个int型对象的地址，1024为该对象的初始化值。对于数组，
C++只能使用new分配数组个数而不能对数组初始化，如 int* pia = new int[24];
    new和delete必须要配合使用，new的东西用完要delete掉。

    指针和reference引用的区别：对于指针point，其可以默认值为0，不指向任何对象；对于reference，其无法被设置为0，其必须代表某一个对象。P51

    默认参数问题：P52页，或者下面有总结

    对于file scope（全局变量），尽量少用，因为会打乱不同函数之间的独立性，变得难以理解。

    inline内联，P55；在2.9节深入讲解

    函数重载：函数名称可以相同，但是函数的参数一定不能相同。若两个函数的名称和参数相同，返回类型不同，则编译器不会判断出两个函数不同。P57

    函数名称代表函数的地址P62

01  return作用
    （1）用在有返回值的函数中，向主调函数返回一个值
    （2）用在无返回值的函数中，提交结束函数的执行

02  pass by refernece
    （1）对象本身并不会被复制一份，复制的是对象的地址（传值则会复制一份）
    （2）如果希望对所传入的对象尽心修改，要将参数声明为reference
    （3）声明为reference的形参加上const时，为的是程序效率的问题，而不是要在函数中修改将要
    传来的实参
    （4）传递内置类型用reference，传递class用pointer

03  动态内存分配
    特点：（1）在heap堆上分配 （2）由程序员自己分配，自己释放
    应用：（1）new申请，delete释放 （2）C风格的动态内存管理（malloc(), free()）

04  默认参数值规则
    （1）如果我们为某个参数提供了默认值，则这一参数右侧所有参数必须有默认值
    （2）默认值在声明和定义处只能指定一次【推荐在声明处指定】P52页

05  函数模版（function template）
    将参数列表的部分（或全部）参数的类型信息抽离出来
    具体的类型信息在采用function template具体实例时指定
    函数模板不需要指定<>内的内容，编译器会自行判断，和类模板进行区别。P59

06  const object
    （1）"一次定义"对const object失效